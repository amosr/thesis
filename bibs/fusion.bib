% -- A --
@inproceedings{ashby2006iterative,
  author    = {Thomas J. Ashby and
               Michael F. P. O'Boyle},
  title     = {Iterative Collective Loop Fusion},
  booktitle = {CC: Compiler Construction},
  year      = {2006}
}

% -- B --

% DSL for Attribute Grammars
% Nice thing about attribute grammars is get tupling for free
% Might be some connection between attribute grammars and push streams
@misc{bransen2014exploiting,
  title={Exploiting Attribute Grammars to Achieve Automatic Tupling},
  author={Bransen, Jeroen and Dijkstra, Atze and Swierstra, Doaitse},
  journal={Technical Report Series},
  number={UU-CS-2014-013},
  year={2014},
  publisher={UU BETA ICS Departement Informatica}
}

% -- C --
@article{chakravarty2003approach,
  title={An approach to fast arrays in {H}askell},
  author={Chakravarty, M. and Keller, G.},
  journal={Advanced Functional Programming},
  year={2003},
  publisher={Springer}
}

% Only skimmed:
% Fold/unfold tupling, as in by rewrite rules: as in rewriting (X => D) and (D => X) repeatedly with other rules in between
@article{chiba2010program,
  title={Program transformation templates for tupling based on term rewriting},
  author={Chiba, Yuki and Aoto, Takahito and Toyama, Yoshihito},
  journal={IEICE TRANSACTIONS on Information and Systems},
  volume={93},
  number={5},
  pages={963--973},
  year={2010},
  publisher={The Institute of Electronics, Information and Communication Engineers}
}

% Stream fusion paper, uses pull streams, relies on inlining, cannot do splits
@inproceedings{coutts2007stream,
  title={Stream fusion: From lists to streams to nothing at all},
  author={Coutts, Duncan and Leshchinskiy, Roman and Stewart, Don},
  booktitle={ACM SIGPLAN Notices},
  year={2007},
}

% Stream fusion for strings. Mentions 'size hints'
@article{coutts2007rewriting,
  title={Rewriting haskell strings},
  author={Coutts, Duncan and Stewart, Don and Leshchinskiy, Roman},
  journal={Practical Aspects of Declarative Languages},
  year={2007},
  publisher={Springer}
}

% -- D --

@inproceedings{darte2002contraction,
  author    = {Alain Darte and
               Guillaume Huard},
  title     = {New Results on Array Contraction},
  booktitle = {ASAP},
  year      = {2002},
}

@inproceedings{darte1999complexity,
  author    = {Alain Darte},
  title     = {On the Complexity of Loop Fusion},
  booktitle = {PACT: Parallel Architectures and Compilation Techniques},
  year      = {1999}
}



% -- E --

% -- F --

% -- G --

% Original short-cut fusion paper using foldr/build
% Actually push-based, but inlining is inherently pull-based so ends up with worst of both.
@inproceedings{gill1993short,
 author = {Gill, Andrew and Launchbury, John and Peyton Jones, Simon L.},
 title = {A short cut to deforestation},
 booktitle = {Proceedings of the conference on Functional programming languages and computer architecture},
 series = {FPCA '93},
 year = {1993},
 publisher = {ACM},
}

% -- H --

% Tupling together two traversals of the same input data.
% Wouldn't work for "join" case of priceOverTime/Market: we don't have a hylomorphism for joining two inputs, and priceOverTime needs to operate over the unfiltered pre-joined data anyway.
% They claim that tupling could be implemented automatically, but doesn't say how well that works in practice. hu1996deriving might show that.
@article{hu1996cheap,
  title={Cheap Tupling Transformation},
  author={Hu, Zhenjiang and Iwasaki, Hideya and Takeichi, Masato},
  journal={METR 96},
  volume={8},
  year={1996},
  publisher={Citeseer}
}

% These statements seem to contradict each other:
% "We propose an algorithm which can automatically turn almost \emph{all} recursive definitions of interest to structural hylomorphisms"
% "Our algorithm is guaranteed to be correct, and to terminate with a succesful hylomorphism. To the contrary, [launchbury1995warm] ... may fail to give build-catas."
% But it's true because the language is restricted to only top-level cases and no mutual recursion.
% Can't express "join" in this language because it requires nested case statements.
% Join cannot be expressed because it requires two case statements: first, to destruct both inputs, second, to check which input is smaller.
% 
@book{hu1996deriving,
  title={Deriving structural hylomorphisms from recursive definitions},
  author={Hu, Zhenjiang and Iwasaki, Hideya and Takeichi, Masato},
  volume={31},
  number={6},
  year={1996},
  publisher={ACM}
}

% Looks like this is the result of putting hu1996cheap and hu1996deriving together:
% deriving hylomorphisms and then tupling them together.
% Language is more expressive than hu1996deriving, but the derivation is less expressive as it doesn't support multiple inputs.
%
% Language could express 'join' as two mutually recursive functions:
%
%> join (Cons x xs, Cons y ys) = join2 (compare x y, x, xs, y, ys)
%> join ...Nil... = Nil
%>
%> join2 (EQ, x, xs, y, ys) = Cons (x,y) (join xs ys)
%> join2 (LT, x, xs, y, ys) = join (xs, Cons y ys)
%> join2 (GT, x, xs, y, ys) = join (Cons x xs, ys)
%
% However, this does not satisty Tuplable Function restriction (Definition 2) which requires that recursive calls are sub-patterns:
% (compare x y, x, xs, y, ys) is not a sub-pattern of (Cons x xs, Cons y ys)
% (xs, Cons y ys) is not a sub-pattern of (compare x y, x, xs, y, ys)
%
% They do not define exactly what they mean by sub-pattern.
% Is this (Cons x xs, ys) a sub-pattern of (Cons x xs, Cons y ys)?
% I wouldn't have thought so, unless they're using a very
%
@article{hu1997tupling,
  title={Tupling calculation eliminates multiple data traversals},
  author={Hu, Zhenjiang and Iwasaki, Hideya and Takeichi, Masato and Takano, Akihiko},
  journal={ACM Sigplan Notices},
  volume={32},
  number={8},
  pages={164--175},
  year={1997},
  publisher={ACM}
}

% Acid Rain (takano1995shortcut) generalised foldr/build to arbitrary types.
% The authors claim that this paper generalises Acid Rain to multiple inputs. For example
%> zip (map double x) (map square y)
% In order to describe zip as a foldr/build hylomorphism we need to choose one of the inputs to destruct; the other must be manifest as a list.
% The Acid Rain authors takano1995shortcut claim this is solved by the generalisation in Acid Rain.
% It looks like Acid Rain solve this by raising zip to the meta-level as product on hylomorphisms.
% "This limitation of the Acid Rain Theorem has already been recognized elsewhere. In (gill1993short, launchbury1995warm) ...".
% These two papers were written before Acid Rain Theorem and talk about foldr/build, not Acid Rain.
% I think this paper actually agrees with and expands upon the very brief Section 4.5 of takano1995shortcut, which is useful.
@article{hu1996extension,
  title={An extension of the {A}cid {R}ain {T}heorem},
  author={Hu, Zhenjiang and Iwasaki, Hideya and Takeichi, Masato},
  journal={Functional and Logic Programming},
  pages={91--105},
  year={1996},
  publisher={World Scientific}
}

% Template Haskell implementation of tupling
@inproceedings{hu2005program,
  title={Program optimizations and transformations in calculation form},
  author={Hu, Zhenjiang and Yokoyama, Tetsuo and Takeichi, Masato},
  booktitle={International Summer School on Generative and Transformational Techniques in Software Engineering},
  pages={144--168},
  year={2005},
  organization={Springer}
}

% -- I --

% -- J --

% Foldr/build fusion by implementing rewrite rules
@MISC{jones2001playingby,
    author = {Peyton Jones, Simon L. and Andrew Tolmach and Tony Hoare},
    title = {Playing by the rules: rewriting as a practical optimisation technique in {GHC} },
    year = {2001}
}

@book{jackson1975principles,
  title={Principles of program design},
  author={Jackson, Michael A},
  volume={197},
  number={5},
  year={1975},
  publisher={Academic press London}
}

@incollection{jackson2002jsp,
  title={JSP in Perspective},
  author={Jackson, Michael},
  booktitle={Software pioneers},
  pages={480--493},
  year={2002},
  publisher={Springer}
}

% -- K --

% Pull-based stream fusion with staged computation.
% Uses staged computation to ensure that inlining happens, but this causes duplication of work.
@inproceedings{kiselyov2016stream,
 author = {Kiselyov, Oleg and Biboudis, Aggelos and Palladinos, Nick and Smaragdakis, Yannis},
 title = {Stream Fusion, to Completeness},
 booktitle = {Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages},
 year = {2017}
}


% -- L --

% Converting pattern-matching to folds so they can be fused with foldr/build.
%
%> map f xs = case xs of [] -> []; (x:xs) -> f x : map f xs
%  ==>
%> map f xs = fold [] (\x xs. f x : xs)
%
% This language can express join, but it's not a complete algorithm. The language is more expressive.
% In contrast to hu1996deriving, their algorithm cannot convert both arguments of zip.
% As such it's unlikely that it would convert both arguments of join.
%
@inproceedings{launchbury1995warm,
  title={Warm fusion: Deriving build-catas from recursive definitions},
  author={Launchbury, John and Sheard, Tim},
  booktitle={Proceedings of the seventh international conference on Functional programming languages and computer architecture},
  pages={314--323},
  year={1995},
  organization={ACM}
}

@inproceedings{lippmeier2013data,
    author = {Ben Lippmeier and Manuel M. T. Chakravarty and Gabrielle Keller and Amos Robinson},
    title = {Data Flow Fusion with Series Expressions in {H}askell},
    year = {2013},
    publisher = {In Submission},
    booktitle={Proceedings of the 2013 Haskell symposium}
}

% -- M --
@article{mainland2013haskell,
  title={{H}askell Beats {C} Using Generalized Stream Fusion},
  author={Mainland, Geoffrey and Leshchinskiy, Roman and Jones, Simon Peyton and Marlow, Simon},
  year={2013}
}

@inproceedings{mainland2013exploiting,
  author    = {Geoffrey Mainland and
               Roman Leshchinskiy and
               Simon L. Peyton Jones},
  title     = {Exploiting vector instructions with generalized stream fusion},
  booktitle = {ICFP: International Conference on Functional Programming},
  year      = {2013}
}

% "SPL is a DSL for ... computing linear transforms y = Ax"
@article{mainland2017haskell,
  title={A Haskell compiler for signal transforms},
  author={Mainland, Geoffrey and Johnson, Jeremy},
  journal={ACM SIGPLAN Notices},
  volume={52},
  number={12},
  pages={219--232},
  year={2017},
  publisher={ACM}
}

% -- N --

% -- O --

% -- P --

% Like our own process fusion, Filter Fusion also statically interleaves the code of producer and consumer processes. Each process must have a single input and output channel, so common operators like zip, unzip, append, partition and so on are not supported. Given an adjacent producer and consumer pair, Filter Fusion alternately assigns control to the code of each. When the consumer needs input, control is passed to the producer, and when the producer produces its value control is passed back to the consumer. This simple scheduling algorithm works only for straight line pipelines of processes. Machine fusion provides a finer grained interleaving of code, which is nessesary to support branching dataflows that contain both splits and joins.
@inproceedings{proebsting1996filter,
  title={Filter fusion},
  author={Proebsting, Todd A and Watterson, Scott A},
  booktitle={POPL},
  year={1996},
}


% -- Q --

% -- R --

@inproceedings{robinson2016icicle,
  title={Icicle: write once, run once},
  author={Robinson, Amos and Lippmeier, Ben},
  booktitle={Proceedings of the 5th International Workshop on Functional High-Performance Computing},
  pages={2--8},
  year={2016},
  organization={ACM}
}

@inproceedings{robinson2017machine,
  title={Machine fusion: merging merges, more or less},
  author={Robinson, Amos and Lippmeier, Ben},
  booktitle={Proceedings of the 19th International Symposium on Principles and Practice of Declarative Programming},
  pages={139--150},
  year={2017},
  organization={ACM}
}

% -- S --

% Introduces a pull-based destroy/unfoldr that supports zips, explains that push / gill1993short doesn't
@inproceedings{svenningsson2002shortcut,
  title={Shortcut fusion for accumulating parameters \& zip-like functions},
  author={Svenningsson, Josef},
  booktitle={ACM SIGPLAN Notices},
  year={2002},
}

% Support both pull and push arrays.
% Rather than supporting arbitrary push arrays, they allow a limited set of combinators which can be easily implemented on push arrays (including those that can't be easily implemented as pull, for example append).
@inproceedings{svensson2014defunctionalizing,
  title={Defunctionalizing push arrays},
  author={Svensson, Bo Joel and Svenningsson, Josef},
  booktitle={Proceedings of the 3rd ACM SIGPLAN workshop on Functional high-performance computing},
  year={2014},
}


% -- T --

% Acid Rain Theorem:
%  generalising foldr/build to hylomorphisms over arbitrary types
% By generalising they can support zip but they go over this very quickly.
@inproceedings{takano1995shortcut,
  title={Shortcut deforestation in calculational form},
  author={Takano, Akihiko and Meijer, Erik},
  booktitle={Proceedings of the seventh international conference on Functional programming languages and computer architecture},
  pages={306--313},
  year={1995},
  organization={ACM}
}

% -- U --

% -- V --

% -- W --

% Supports non-linear, but doesn't terminate.
% Might support splits and joins, but might not terminate
@inproceedings{wadler1984listlessness,
  title={Listlessness is better than laziness: Lazy evaluation and garbage collection at compile-time},
  author={Wadler, Philip},
  booktitle={Proceedings of the 1984 ACM Symposium on LISP and functional programming},
  pages={45--52},
  year={1984},
  organization={ACM}
}

% Extension of listlessness.
% Only supports linear (eg. zip xs xs is outlawed) but listlessness allowed non-linear.
% However, listlessness searches whole space so can diverge eg for Lustre example like (merge c x (whenot c y))
@article{wadler1990deforestation,
  title={Deforestation: Transforming programs to eliminate trees},
  author={Wadler, Philip},
  journal={Theoretical computer science},
  volume={73},
  number={2},
  pages={231--248},
  year={1990},
  publisher={Elsevier}
}

% -- X --

% -- Y --

% -- Z --




%% Original coroutines paper
% Interesting but I'm not sure what I can really take from it.
% The actual coroutines part only comprises the first three pages,
% then goes on to parsing and RPN.
@article{conway1963design,
  title={Design of a separable transition-diagram compiler},
  author={Conway, Melvin E},
  journal={Communications of the ACM},
  volume={6},
  number={7},
  pages={396--408},
  year={1963},
  publisher={ACM}
}

