% -- A --
@inproceedings{ashby2006iterative,
  author    = {Thomas J. Ashby and
               Michael F. P. O'Boyle},
  title     = {Iterative Collective Loop Fusion},
  booktitle = {CC: Compiler Construction},
  year      = {2006}
}

% -- B --

% -- C --
@article{chakravarty2003approach,
  title={An approach to fast arrays in {H}askell},
  author={Chakravarty, M. and Keller, G.},
  journal={Advanced Functional Programming},
  year={2003},
  publisher={Springer}
}

% Stream fusion paper, uses pull streams, relies on inlining, cannot do splits
@inproceedings{coutts2007stream,
  title={Stream fusion: From lists to streams to nothing at all},
  author={Coutts, Duncan and Leshchinskiy, Roman and Stewart, Don},
  booktitle={ACM SIGPLAN Notices},
  year={2007},
}

% Stream fusion for strings. Mentions 'size hints'
@article{coutts2007rewriting,
  title={Rewriting haskell strings},
  author={Coutts, Duncan and Stewart, Don and Leshchinskiy, Roman},
  journal={Practical Aspects of Declarative Languages},
  year={2007},
  publisher={Springer}
}

% -- D --

@inproceedings{darte2002contraction,
  author    = {Alain Darte and
               Guillaume Huard},
  title     = {New Results on Array Contraction},
  booktitle = {ASAP},
  year      = {2002},
}

@inproceedings{darte1999complexity,
  author    = {Alain Darte},
  title     = {On the Complexity of Loop Fusion},
  booktitle = {PACT: Parallel Architectures and Compilation Techniques},
  year      = {1999}
}



% -- E --

% -- F --

% -- G --

% Original short-cut fusion paper using foldr/build
% Actually push-based, but inlining is inherently pull-based so ends up with worst of both.
@inproceedings{gill1993short,
 author = {Gill, Andrew and Launchbury, John and Peyton Jones, Simon L.},
 title = {A short cut to deforestation},
 booktitle = {Proceedings of the conference on Functional programming languages and computer architecture},
 series = {FPCA '93},
 year = {1993},
 publisher = {ACM},
}

% -- H --

% -- I --

% -- J --

% Foldr/build fusion by implementing rewrite rules
@MISC{jones2001playingby,
    author = {Peyton Jones, Simon L. and Andrew Tolmach and Tony Hoare},
    title = {Playing by the rules: rewriting as a practical optimisation technique in {GHC} },
    year = {2001}
}

@incollection{jackson2002jsp,
  title={JSP in Perspective},
  author={Jackson, Michael},
  booktitle={Software pioneers},
  pages={480--493},
  year={2002},
  publisher={Springer}
}

% -- K --

% Pull-based stream fusion with staged computation.
% Uses staged computation to ensure that inlining happens, but this causes duplication of work.
@inproceedings{kiselyov2016stream,
 author = {Kiselyov, Oleg and Biboudis, Aggelos and Palladinos, Nick and Smaragdakis, Yannis},
 title = {Stream Fusion, to Completeness},
 booktitle = {Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages},
 year = {2017}
}


% -- L --
@inproceedings{lippmeier2013data,
    author = {Ben Lippmeier and Manuel M. T. Chakravarty and Gabrielle Keller and Amos Robinson},
    title = {Data Flow Fusion with Series Expressions in {H}askell},
    year = {2013},
    publisher = {In Submission},
    booktitle={Proceedings of the 2013 Haskell symposium}
}

% -- M --
@article{mainland2013haskell,
  title={{H}askell Beats {C} Using Generalized Stream Fusion},
  author={Mainland, Geoffrey and Leshchinskiy, Roman and Jones, Simon Peyton and Marlow, Simon},
  year={2013}
}

@inproceedings{mainland2013exploiting,
  author    = {Geoffrey Mainland and
               Roman Leshchinskiy and
               Simon L. Peyton Jones},
  title     = {Exploiting vector instructions with generalized stream fusion},
  booktitle = {ICFP: International Conference on Functional Programming},
  year      = {2013}
}

% "SPL is a DSL for ... computing linear transforms y = Ax"
@article{mainland2017haskell,
  title={A Haskell compiler for signal transforms},
  author={Mainland, Geoffrey and Johnson, Jeremy},
  journal={ACM SIGPLAN Notices},
  volume={52},
  number={12},
  pages={219--232},
  year={2017},
  publisher={ACM}
}

% -- N --

% -- O --

% -- P --

% -- Q --

% -- R --

% -- S --

% Push-based: supports zips, explains that gill1993short doesn't
@inproceedings{svenningsson2002shortcut,
  title={Shortcut fusion for accumulating parameters \& zip-like functions},
  author={Svenningsson, Josef},
  booktitle={ACM SIGPLAN Notices},
  year={2002},
}

% Support both pull and push arrays.
% Rather than supporting arbitrary push arrays, they allow a limited set of combinators which can be easily implemented on push arrays (including those that can't be easily implemented as pull, for example append).
@inproceedings{svensson2014defunctionalizing,
  title={Defunctionalizing push arrays},
  author={Svensson, Bo Joel and Svenningsson, Josef},
  booktitle={Proceedings of the 3rd ACM SIGPLAN workshop on Functional high-performance computing},
  year={2014},
}


% -- T --

% -- U --

% -- V --

% -- W --

% Supports non-linear, but doesn't terminate.
% Might support splits and joins, but might not terminate
@inproceedings{wadler1984listlessness,
  title={Listlessness is better than laziness: Lazy evaluation and garbage collection at compile-time},
  author={Wadler, Philip},
  booktitle={Proceedings of the 1984 ACM Symposium on LISP and functional programming},
  pages={45--52},
  year={1984},
  organization={ACM}
}

% Extension of listlessness.
% Only supports linear (eg. zip xs xs is outlawed) but listlessness allowed non-linear.
% However, listlessness searches whole space so can diverge eg for Lustre example like (merge c x (whenot c y))
@article{wadler1990deforestation,
  title={Deforestation: Transforming programs to eliminate trees},
  author={Wadler, Philip},
  journal={Theoretical computer science},
  volume={73},
  number={2},
  pages={231--248},
  year={1990},
  publisher={Elsevier}
}

% -- X --

% -- Y --

% -- Z --




%% Original coroutines paper
% Interesting but I'm not sure what I can really take from it.
% The actual coroutines part only comprises the first three pages,
% then goes on to parsing and RPN.
@article{conway1963design,
  title={Design of a separable transition-diagram compiler},
  author={Conway, Melvin E},
  journal={Communications of the ACM},
  volume={6},
  number={7},
  pages={396--408},
  year={1963},
  publisher={ACM}
}

